
( 'hello world' delog .)

use ( module 'modules/set-utils.nom' )

( '------------- scope test -------------' delog .)

defun (: 'tf' ( any ) [
  ( that > 0 else [ return ( none ) ] .)
  ( def (: 'a' ( that ) ) .)
  ( a delog .)
  ( tf ( that - 1 ) .)
  ( a delog .)
] )

( tf 3 .)

( '------------- recursive loop test -------------' delog .)

defun (: 'recgen' ( any ) [
  ( that throw .)
  that > 0 then [ recgen ( that - 1 ) ]
] )

defun (: 'recprint' ( any ) [
  that next delog then [ recprint ( that ) ]
] )

( recprint ( gen (: ( number ) [ recgen 5 ] ) each ) .)


( '------------- endless loop test -------------' delog .)

var (: 'elements1' ( range (: -3 3 ) each ) )

loop [
  elements1 next delog else [ stop ]
]



( '-------------- loop test -------------' delog .)


var (: 'elements2' ( range (: 0 6 ) each ) )
var (: 'sum' 0 )
loop [
  sum ( + ( elements2 next delog else [ stop ] ) !)
]
( sum delog .)


( '------------- sort test -------------' delog .)


def (: 'l' ( list ( number ) 3 8 5 1 )Â )

( print-all( l ) .)

( print-all( sort ( l ) delog ) .)

( '------------- fun test -------------' delog .)

defun (: 'ftest' ( number ) [
  ( 'fun testing test' `	delog .)
  ( this delog .)
  ( that delog .)
  'returnvalue'
] )

defun (: 'ftest2' ( set ) [
  ( 'fun testing test 2' delog .)
  ( this delog .)
  ( print-all ( that ) .)
  ( print-all ( sort ( that ) ) .)
  'returnvalue'
] )

defun (: 'ftest3' ( cat [ assort (: (: 'p1' (number) ) (: 'p2' (number) ) ) ( that ) ] ) [
  ( 'fun testing test 3' delog .)
  ( this delog .)
  ( that p1 delog .)
  ( that p2 delog .)
  that p1 + ( that p2 ) / 2
] )



( ftest 34 delog .)

( ftest2 ( l ) .)

( ftest2 (: 10 4 11 4 ) .)

( ftest3 (: 10 20 ) delog .)

var (: 'ftest4' ( ftest3 delog ) delog )

( ftest4 (: 20 30 ) delog .)

( ftest5 10 delog .)

var (: 'ftest6' ( fun (: ( number ) [
  ( 'fun testing test 6' delog .)
  ( this delog .)
  ( that delog .)
  'returnvalue'
] ) ) )

( 'using fun' delog .)
( ftest6 235 delog .)

( '------------- nom test -------------' delog .)

nom (: 'ok' [ 'yes' ] )

( ok delog .)

( '------------- finnished -------------' delog .)

( print-all ( list ( number ) merge ( list ( number ) 1 2 3 ) ) .)

( print-all ( ( list ( any ) 'a' 1 'b' 2 'c' 3 ) merge ( list ( any ) 5 6 'dgsfgdfsg' 5 ) ) .)

( print-all ( ( list ( any ) 'a' 1 'b' 2 'c' 3 ) merge ( [] ( 100 + 1 ) ( 100 + 2 ) ( 100 + 3 ) ) ) .)

var (: 'l1' [] )
( l1 ( 23 ) .)
( l1 ( 23 ) .)
( l1 ( 23 ) .)
( print-all ( l1 ( 1 + 2 ) ( 3 + 4 ) ) .)

( [] each next delog .)


( '------------- list test -------------' delog .)

var (: 'alist' ( list ( number ) 1 2 3 ) )
var (: 'blist' ( list ( number ) 4 5 6 ) )

( print-all ( alist ) .)
( print-all ( blist ) .)

( alist ( merge ( blist ) !) .)

( print-all ( alist 24 ) .)

( print-all ( sort ( range (: -3 3 ) ) ) .)


( '------------- fun passing test -------------' delog .)

defun (: 'ftest10' ( fun ) [
  ( 'fun testing test 10' delog .)
  that 11
] )

( ftest10 ( fun (: ( number ) [ that * 9 ] ) ) delog .)

( '------------- apply test -------------' delog .)

def (: 'ftest11' ( ftest delog apply 100 ) )

( ftest11 delog 10 .)

( '------------- gen test -------------' delog .)

var (: 'gen1' ( gen (: ( number ) [ ( 11 throw .) ( 33 throw .) ( 22 throw .) ] ) ) )

var (: 'list1' ( list ( number ) 1000 2 ) )


( gen1 delog .)

( print-all ( sort( gen1 ) ) .)

( print-all ( sort( list1 merge ( gen1 ) ) ( length delog .) ) .)


( '------------- catch/throw test -------------' delog .)

catch (: ( number ) [ 7878 ( 'catch number' delog .) ( that delog .) ] )

( fun (: ( number ) [
  that * 100 ( 5757575 throw .)
] ) 99 delog .)

( 4646464 throw delog .)


( '------------- cat test -------------' delog .)

( cat [ 10 ] delog .)

( fun (: ( cat [ 0 < ( that ) * 10 ] ) [
  that + 8
] ) 9 delog .)

( '------------- assort test -------------' delog .)

var (: 'as1' ( assort (: (: 'a' ( number ) ) (: 'b' ( string ) ) ) ) )

var (: 'aw1' ( as1 (: 123 'abc' ) ) )

var (: 'aw2' ( as1 (: 55 'asdf' ) ) )

( aw1 a delog .)
( aw1 b delog .)

( aw2 a delog .)
( aw2 b delog .)

var (: 'mycat' ( cat [ as1 ( that ) delog ] ) )


defun (: 'myfun' ( mycat ) [
  ( 'doing mycat' delog .)
  ( that a delog .)
  ( that b delog .)
  that
] )

( myfun (: 333 'bbb' ) delog .)

( '------------- stuff test -------------' delog .)

def (: 'struct1' ( fact (
  none
  is ( fun (: ( cat [ assort (: (: 'a' ( number ) ) (: 'b' ( number ) )                     ) ( that ) ] ) [ that ] ) )
  is ( fun (: ( cat [ assort (: (: 'a' ( number ) ) (: 'b' ( number ) ) (: 'c' ( string ) ) ) ( that ) ] ) [ that ] ) )
) ) )

( struct1 delog .)

defun (: 'print-struct1' ( struct1 ) [
  ( 'printing struct1' delog .)
  ( that a delog .)
  ( that b delog .)
  ( that c delog .)
  that
] )

var (: 's1-1' ( struct1 (: 199 299 'asdf' ) ) )

( print-struct1 ( s1-1 ) .)

( print-struct1 ( struct1 (: 12 14 ) ) .)


( '------------- struct test -------------' delog .)

def (: 'struct2' ( fact ( assort (: (: 'n' ( number ) ) (: 'm' ( string ) ) ) ) ) )

( struct2 delog .)

( struct2 (: 123 'abc' ) n delog .)
( struct2 (: 123 'abc' ) m delog .)

( '------------- struct struct test -------------' delog .)

def (: 'struct4' ( struct (: (: 'n' ( number ) ) (: 'm' ( string ) ) ) ) )

var (: 's4v' ( struct4 delog (: 1321 '1cba' ) ) )

( s4v n delog .)
( s4v m delog .)

( '------------- io test -------------' delog .)

def (: ( none noms (: 'to-string' [ 'mystr' ] ) ) ( none noms (: 'to-string' [ 898989 ] ) ) )

( console write ( string 555 ' asdfsdf ' 12312 tab ' --- ' tab ( mystr ) newl ) .)

( console write 1003 tab 'OKLI: ' tab 1 ', ' 2 ', ' 3 newl .)

(: 11 22 33 join ', ' delog .)

( console write (: 1 ' ' 2 'sdfasdf' (: 4 4 4 ) 3 ) newl .)

( '------------- io test -------------' delog .)

( then ( ' ( console write ' qt 'hey' qt ' newl .) ' delog parse ) .)

( '------------- burst test -------------' delog .)

( console write ( gen (: ( number ) [ ( gen1 all .) ( : 1 2 3 4 5 all .) ( range (: -3 3 ) all .) ] ) ) newl .)
( console write ( gen (: ( string ) [ ( 'asdfa' throw .) ( none has (: 'a1' 0 ) delog has (: 'a2' 1 ) delog all-attributes .) ] ) ) newl .)


( '------------- finnished -------------' delog .)

